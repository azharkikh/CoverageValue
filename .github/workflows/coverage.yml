name: Run tests with coverlet

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - category: unit
            project: CoverageValue.Unit.Tests
          - category: component
            project: CoverageValue.Component.Tests
          - category: integration
            project: CoverageValue.Integration.Tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore CoverageValue.sln

      - name: Run ${{ matrix.category }} tests with coverage
        run: |
          dotnet test tests/${{ matrix.project }}/ \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput="coverage.xml" \
            /p:Exclude="[*.Tests]*"
      
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.category }}
          path: tests/${{ matrix.project }}/coverage.xml

  generate-report:
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-results

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate coverage summary
        id: report
        run: |
          reportgenerator \
            "-reports:coverage-results/**/*.xml" \
            "-targetdir:coverage-report" \
            "-reporttypes:TextSummary"
          
      - name: Parse and display total line coverage
        id: coverage_parser
        run: |
          COVERAGE_VALUE=$(grep 'Line coverage' coverage-report/Summary.txt | sed 's/.*: //;s/%//')
          echo "--- Merged Coverage Summary ---"
          echo "Total Line Coverage: $COVERAGE_VALUE%"
          echo "-------------------------------"
          echo "line_coverage_percent=$COVERAGE_VALUE" >> $GITHUB_OUTPUT

      - name: Use the parsed value (Example for future use)
        run: |
          echo "The parsed value is ${{ steps.coverage_parser.outputs.line_coverage_percent }}%. This can now be sent to Kusto."

