name: CoverageMatrix

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  coverage:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - category: unit
            project: CoverageValue.Unit.Tests
          - category: component
            project: CoverageValue.Component.Tests
          - category: integration
            project: CoverageValue.Integration.Tests

    env:
      SOLUTION_DIR: ${{ github.workspace }}/CoverageValue

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Run ${{ matrix.category }} tests with coverage
        shell: pwsh
        run: |
          $projectDir  = "tests/${{ matrix.project }}"
          $projectPath = Join-Path $projectDir "${{ matrix.project }}.csproj"
          
          $coverletOutputPath = Join-Path $projectDir "coverage-results"
          $localOutputXml = Join-Path $coverletOutputPath "${{ matrix.project }}.xml"

          New-Item -ItemType Directory -Force -Path $coverletOutputPath | Out-Null

          dotnet test $projectPath `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            "/p:CoverletOutput=$localOutputXml"
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.category }}
          path: tests/${{ matrix.project }}/coverage-results/${{ matrix.project }}.xml
          rename-to: ${{ matrix.category }}.xml
  
  report:
    runs-on: windows-latest
    needs: coverage
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-results

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate merged report
        shell: pwsh
        run: |
          reportgenerator `
            "-reports:coverage-results/**/*.xml" `
            "-targetdir:coverage-report" `
            "-reporttypes:TextSummary;lcov"

      - name: Show coverage summary in log
        shell: pwsh
        run: |
          Write-Host "--- Coverage Summary ---"
          Get-Content "coverage-report/Summary.txt"
          Write-Host "------------------------"

