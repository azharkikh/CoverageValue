name: CoverageMatrix

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  coveragematrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - category: unit
            project: CoverageValue.Unit.Tests
          - category: component
            project: CoverageValue.Component.Tests
          - category: integration
            project: CoverageValue.Integration.Tests

    env:
      SOLUTION_DIR: ${{ github.workspace }}/CoverageValue

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Run ${{ matrix.category }} tests with coverage
        shell: bash
        run: |
          projectDir="tests/${{ matrix.project }}"
          projectPath="$projectDir/${{ matrix.project }}.csproj"
          relativeCoverletOutput="coverage-results/${{ matrix.project }}.xml"

          mkdir -p "$projectDir/coverage-results"

          dotnet test "$projectPath" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            "/p:CoverletOutput=$relativeCoverletOutput"
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.category }}
          path: tests/${{ matrix.project }}/coverage-results/${{ matrix.project }}.xml
  
  report:
    runs-on: ubuntu-latest
    needs: coverage
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-results

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate merged report
        shell: bash
        run: |
          reportgenerator \
            "-reports:coverage-results/**/*.xml" \
            "-targetdir:coverage-report" \
            "-reporttypes:TextSummary;lcov"

      - name: Show coverage summary in log
        shell: bash
        run: |
          echo "--- Coverage Summary ---"
          cat coverage-report/Summary.txt
          echo "------------------------"
